/* Global Variables */
var canvas = document.createElement("canvas");
var ctx = canvas.getContext("2d");
var canvaswidth;
var canvasheight;

// Dependency GN */
//Note that width is being obtain here using jQuery, the default behavior is to have the width based on window.innerWidth & window.innerheight
var box = document.getElementById('puzzle');
$('.box').css('padding','15px');
$('.box').css('background','red');
var $_width  = $('.pants-dance .box').width();
var $_height = $('.pants-dance .box').height();


canvaswidth  = $_width;//window.innerWidth;
canvasheight = $_height;//window.innerHeight;
canvas.width = canvaswidth;
canvas.height = canvasheight;


 
box.appendChild(canvas);

//document.onmousemove = getMouseXY; 
document.addEventListener("mousemove", getMouseXY);
//box.onmousemove = getMouseXY; 

var Images=[];

/* Just follow the same pattern if you want to add more or less images...*/
var image1 = new Image(); image1.src = "img/baymax.jpg";
var image2 = new Image(); image2.src = "img/baymax2.jpg";
var image3 = new Image(); image3.src = "img/baymax3.jpg";

/* Just follow the same pattern if you want to add more or less images...*/
Images[0] =[image1]
Images[1] =[image2]
Images[2] =[image3]

var H = 3;
var W = 3;
function SetupMode(Mode){

    if(Mode==1){H = 3; W = 3;}
    else if (Mode==2){H = 4; W = 4;}
    else if (Mode==3){H = 5; W = 5;}
    else if (Mode==4){H = 6; W = 6;}
    else if (Mode==5){H = 7; W = 7;}
    else             {H = 3; W = 3;}
    srcPosition = SliceImage()
    CreatePuzzle()
    Shuffle(200*H)
}

var nextCheck = false;
var previewCheck = false;
var previousCheck = false;
var previewActivated = false;

function onclickLink(e){
    if(nextCheck)            {
        if (H<7){
            H ++;
            W ++; 
        }
        puzzle  = [];
        solved  = [];
        correct = [];
        SliderImage = Images[Math.floor((Math.random()*Images.length)+0)]
        srcPosition = SliceImage()
        CreatePuzzle()
        Shuffle(200*H)
        previewActivated = false;
    }
    else if(previewCheck)    {
        if(previewActivated==false){previewActivated=true}
        else{previewActivated=false}
    }
    else if(previousCheck){
        if (H>3){
            H --;
            W --;
        }

        puzzle  = [];
        solved  = [];
        correct = [];
        SliderImage = Images[Math.floor((Math.random()*Images.length)+0)]
        srcPosition = SliceImage()
        CreatePuzzle()
        Shuffle(200*H)
        previewActivated = false;
    }
    render()
}


var previous = new Image(); previous.src = "img/previous.png";
var preview = new Image(); preview.src = "img/preview.png";
var next = new Image(); next.src = "img/next.png";

var puzzle  = [];
var solved  = [];
var correct = [];

var SliderImage = Images[Math.floor((Math.random()*Images.length)+0)]
var srcPosition = []

/* IE Acts Strange with Mouse Events so we need the check the browser is IE */
var IE = document.all?true:false
var cursor = {X:1000000, Y:1000000};
//if (!IE) document.captureEvents(Event.MOUSEMOVE)
if (!IE) captureEvents(Event.CLICK | Event.MOUSEDOWN | Event.MOUSEUP);
function getMouseXY(e) {
    if (IE){ 
        cursor.X = event.clientX;
        cursor.Y = event.clientY;
    }else{ 
        cursor.X = e.pageX;
        cursor.Y = e.pageY;
    }  
}

/* OnResize event for fullscreen canvas support */
function onResize(){
	//GN
	$_width  = $('.pants-dance .box').width();
	$_height = $('.pants-dance .box').height();
 
 

 
    canvaswidth = $_width;//window.innerWidth;
    canvasheight = $_height;//window.innerHeight;
    canvas.width = canvaswidth;
    canvas.height = canvasheight;
}


/* Render everything */
function render(){
    ctx.fillStyle="silver";
    ctx.fillRect(0,0,canvas.width,canvas.height+1);
    for (y=0; y<puzzle.length; y++){
        for (x=0; x<puzzle[y].length; x++){

            if (puzzle[y][x] == 1){
                var index = solved[y*W+x]
                var DD = index
                var DX = Math.floor(DD/W)
                var DY = DD - DX * W

                ctx.drawImage(  SliderImage[0], 
                                srcPosition[index][0],
                                srcPosition[index][1],
                                srcPosition[index][2],
                                srcPosition[index][3],
                                x*Math.ceil(canvas.width/W),
                                canvas.height*0.1+y*Math.ceil(canvas.height*0.9/H),
                                Math.ceil(canvas.width/W),
                                Math.ceil(canvas.height*0.9/H))
                
            }
        }
    }
                
    Raster()
    var gradient = ctx.createLinearGradient(0,0,0,canvas.height*0.1+1);
    gradient.addColorStop(0, 'gray');
    gradient.addColorStop(1, 'silver');
    ctx.fillStyle = gradient;
    ctx.fillRect(0,0,canvas.width,canvas.height*0.1+1);
    ctx.drawImage(previous,0,0,canvas.width*0.08,canvas.height*0.1)
    ctx.drawImage(next,canvas.width*0.90,0,canvas.width*0.10,canvas.height*0.1)
    ctx.drawImage(preview,canvas.width*0.35,canvas.height*0.01,canvas.width*0.3,canvas.height*0.08)
    if(previewActivated==true){
        ctx.globalAlpha = 0.75
        ctx.drawImage(SliderImage[0],0,canvas.height*0.1,canvas.width,canvas.height*0.9)
    }
}


function SliceImage(){
    array = []
    width = Math.floor((SliderImage[0].width)/W)                                                  
    height = Math.floor((SliderImage[0].height)/H)                                              

    for (a=0; a<H*W; a++){
        var DD = a
        var DX = Math.floor(DD/W)
        var DY = DD - DX * W
        array.push([DY*width,DX*height,width,height])
        
    }                        
    return array
}

function Raster(){
    ctx.beginPath();
    ctx.rect(0, canvas.height*0.1, canvas.width,  canvas.height*0.9+1);
    ctx.lineWidth = H/1.5;
    ctx.strokeStyle = 'silver';
    ctx.stroke();
    
    for (y=1; y<H; y++){
        ctx.beginPath();
        ctx.moveTo(0           ,canvas.height*0.1+(canvas.height*0.9+1)/H*y);
        ctx.lineTo(canvas.width,canvas.height*0.1+(canvas.height*0.9+1)/H*y);
        ctx.stroke();
    }
    
    for (x=1; x<W; x++){
        ctx.beginPath();
        ctx.moveTo(canvas.width/W*x,canvas.height*0.1);
        ctx.lineTo(canvas.width/W*x,canvas.height+1);
        ctx.stroke();
    }
}

function CreatePuzzle(){
    for (y=0; y<H; y++){
        puzzle[y] = []
        for (x=0; x<W; x++){
            solved.push(y*W+x)
            correct.push(y*W+x)
            if (y*W+x < W*H-1){
                puzzle[y].push(1)
            }
            else{                            
                puzzle[y].push(0)
            }
        }
    }
}


function Shuffle(Times){
    timesShuffled = 0
    temp=0
    while (timesShuffled < Times){
        y = Math.floor((Math.random()*(H))+0)
        x = Math.floor((Math.random()*(W))+0)
        if (puzzle[y][x] == 1){
            for (m=0; m<puzzle[0].length; m++){
                for (n=0; n<puzzle[0].length; n++){
                    if (puzzle[m][n]==0){
                        if (((x == n+1) && (y == m)) || ((x == n-1) && (y == m)) || ((y == m+1) && (x == n)) || ((y == m-1) && (x == n))){
                            puzzle[m][n] = 1
                            puzzle[y][x] = 0
                            temp = solved[y*W+x]
                            solved[y*W+x] = solved[m*W+n]
                            solved[m*W+n] = temp
                            timesShuffled ++
                        }
                    }
                }
            }
        }
    }
}

function equalLists(list1,list2){
    if(list1.length != list2.length){
        return false;
    }
    else{
        for(i = list1.length; i--;) {
            if(list1[i] != list2[i]){
                return false;
            }
        }
    }
    return true;
}


/* Game Logic */
function action(){
    for (y=0; y<puzzle.length; y++){
        for (x=0; x<puzzle[y].length; x++){
            if (((canvas.width/W)*x < cursor.X) && (cursor.X < (x+1)*(canvas.width/W)) && (canvas.height*0.1+y*(canvas.height*0.9/H) < cursor.Y) && (cursor.Y < canvas.height*0.1+(y+1)*(canvas.height*0.9/H))){
                if (puzzle[y][x] == 1){
                    for (m=0; m<puzzle.length; m++){
                        for (n=0; n<puzzle[m].length; n++){
                            if (puzzle[m][n]==0){
                                if (((x == n+1) && (y == m)) || ((x == n-1) && (y == m)) || ((y == m+1) && (x == n)) || ((y == m-1) && (x == n))){
                                    puzzle[m][n] = 1
                                    puzzle[y][x] = 0
                                    temp = solved[y*W+x]
                                    solved[y*W+x] = solved[m*W+n]
                                    solved[m*W+n] = temp
                                    errorClick = true
                                    if (equalLists(solved,correct)){
                                        previewActivated = true
                                        alert("You've beaten this level, you can select another one by pressing the arrows")
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }               
    }
  
    if(canvas.width*0.75 < cursor.X && cursor.Y < canvas.height*0.1){
        nextCheck = true
        canvas.addEventListener("click", onclickLink, false);
    }else{nextCheck = false}
    
    if(canvas.width*0.25 < cursor.X && canvas.width*0.75 > cursor.X && cursor.Y < canvas.height*0.1){
        previewCheck = true
        canvas.addEventListener("click", onclickLink, false);
    }else{previewCheck = false}
    
    if(canvas.width*0.25 > cursor.X && cursor.Y < canvas.height*0.1){        
        previousCheck = true
        canvas.addEventListener("click", onclickLink, false);
    }else{previousCheck = false}  

}


/* Main Function */
var main = function () {
    onResize();
    render();
    
};
canvas.addEventListener('click', action, false)
setInterval(main, 32);